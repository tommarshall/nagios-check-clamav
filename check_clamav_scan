#!/usr/bin/env bash

#
# check_clamav_scan - Nagios plugin for monitoring ClamAV.
#
# Released under the MIT License.
#
# https://github.com/tommarshall/nagios-check-clamav-scan
#

VERSION=0.1.0
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
CRITICAL_THRESHOLD=1
WARNING_THRESHOLD=1
EXPIRY_THRESHOLD='48 hours'
VERBOSE=0

#
# Output version.
#

version() {
  echo "check_clamav_scan $VERSION"
}

#
# Output usage information.
#

usage() {
  echo 'Usage: ./check_clamav_scan -l <path> [options]'
}

#
# Output help information.
#

help() {
  usage
  cat <<-EOF

  Examples:
    ./check_clamav_scan -l /tmp/clamav.log

    ./check_clamav_scan -l /tmp/clamav.log -e '1 hour'

    ./check_clamav_scan -l /tmp/clamav.log -c 10

    ./check_clamav_scan -l /tmp/clamav.log -c 10 -w 5

  Options:
    -l, --logfile <path>        path to clamscan logfile
    -e, --expiry <duration>     expiry threshold for logfile
    -w, --warning <number>      number of infected files treat as WARNING
    -c, --critical <number>     number of infected files to treat as CRITICAL
    -v, --verbose               include the scan summary in the output
    -V, --version               output version
    -h, --help                  output help information

  -e/--expiry should be a human readable duration, e.g. '1 hour', or '7 days'.
  -c/--critical takes priority over -w/--warning.

  For more information, see https://github.com/tommarshall/nagios-check-clamav-scan

EOF
}

#
# Output nagios report.
#

report() {
  echo "$@"
  test $VERBOSE -eq 1 && echo "${SCAN_SUMMARY}"
}

#
# Extract the last scan summary for the provided logfile path.
#

extract_summary() {
  # getting the last occurance with sed alone is actually quite tricky, ref:
  # https://stackoverflow.com/a/7724969/885540
  # some sed versions (BSD) don't like semi-colon delimination, ref:
  # https://stackoverflow.com/a/15470635/885540
  sed -n '
    /----------- SCAN SUMMARY -----------/{
      h
      b
    }
    H
    ${
      x
      p
    }
  ' "$1"
}

#
# Parse argv.
#

while test $# -ne 0; do
  ARG=$1; shift
  case $ARG in
    -l|--logfile) LOGFILE_PATH=$1; shift ;;
    -e|--expiry) EXPIRY_THRESHOLD=$1; shift ;;
    -w|--warning) WARNING_THRESHOLD=$1; shift ;;
    -c|--critical) CRITICAL_THRESHOLD=$1; shift ;;
    -v|--verbose) VERBOSE=1 ;;
    -V|--version) version; exit ;;
    -h|--help) help; exit ;;
    *)
      echo "UNKNOWN: Unrecognised argument: $ARG"
      usage >&2
      exit $UNKNOWN
      ;;
  esac
done

#
# Showtime.
#

# ensure we have executable dependencies
for dependency in cut grep rev sed; do
  if ! hash $dependency >/dev/null 2>&1; then
    echo "UNKNOWN: Missing dependency: ${dependency}"
    exit $UNKNOWN
  fi
done

# ensure we have GNU date
if ! date --version >/dev/null 2>&1 ; then
  if gdate --version >/dev/null 2>&1 ; then
    date () { gdate "$@"; }
  else
    echo 'UNKNOWN: Unable to find GNU date'
    exit $UNKNOWN
  fi
fi

# ensure we have GNU stat
if ! stat --version >/dev/null 2>&1 ; then
  if gstat --version >/dev/null 2>&1 ; then
    stat () { gstat "$@"; }
  else
    echo 'UNKNOWN: Unable to find GNU stat'
    exit $UNKNOWN
  fi
fi

# ensure we have GNU stat
if ! touch --version >/dev/null 2>&1 ; then
  if gtouch --version >/dev/null 2>&1 ; then
    touch () { gtouch "$@"; }
  else
    echo 'UNKNOWN: Unable to find GNU touch'
    exit $UNKNOWN
  fi
fi

# ensure we have a LOGFILE_PATH
if [ -z "$LOGFILE_PATH" ]; then
  echo 'UNKNOWN: --logfile/-l not set'
  exit $UNKNOWN
fi

# ensure we're able to read the LOGFILE_PATH
if ! [[ -f "$LOGFILE_PATH" && -r "$LOGFILE_PATH" ]]; then
  echo "UNKNOWN: Unable to read logfile: ${LOGFILE_PATH}"
  exit $UNKNOWN
fi

# ensure we're able to locate a scan summary within the logfile
SCAN_SUMMARY=$(extract_summary $LOGFILE_PATH)
if [ -z "$SCAN_SUMMARY" ]; then
  echo 'UNKNOWN: Unable to locate scan summary within logfile'
  exit $UNKNOWN
fi

# ensure we're able to locate an infected files count within the scan summary
INFECTED_FILES_COUNT=$(echo "$SCAN_SUMMARY" | grep '^Infected files:' | rev | cut -d' ' -f1 | rev)
if [ -z "$INFECTED_FILES_COUNT" ]; then
  echo 'UNKNOWN: Unable to locate infected files count within scan summary'
  exit $UNKNOWN
fi

# ensure the expiry argument is valid
if ! THRESHOLD_DATE="$(date --date="-$EXPIRY_THRESHOLD" +'%s' 2>/dev/null)"; then
  echo "UNKNOWN: Invalid expiry specified: ${EXPIRY_THRESHOLD}"
  exit $UNKNOWN
fi

# ensure the logfile has not expired
LOGFILE_LAST_MODIFIED_DATE="$(stat --format='%Y' $LOGFILE_PATH)"
if [ "$LOGFILE_LAST_MODIFIED_DATE" -lt "$THRESHOLD_DATE" ]; then
  echo "UNKNOWN: Logfile has expired, more than ${EXPIRY_THRESHOLD} old"
  exit $UNKNOWN
fi

#
# report and exit
#

if [ "$INFECTED_FILES_COUNT" -lt "$CRITICAL_THRESHOLD" ]; then
  if [ "$INFECTED_FILES_COUNT" -lt "$WARNING_THRESHOLD" ]; then
    report "OK: ${INFECTED_FILES_COUNT} infected file(s) detected"
    exit $OK
  fi
  report "WARNING: ${INFECTED_FILES_COUNT} infected file(s) detected"
  exit $WARNING
fi

report "CRITICAL: ${INFECTED_FILES_COUNT} infected file(s) detected"
exit $CRITICAL
